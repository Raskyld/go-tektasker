/*
Copyright 2023 Enzo Nocera <enzo@nocera.eu>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package template

const DotEnvName = "dotenv"
const DotEnvTpl = `# This .env is generated by tektasker init
# and contains configuration for your development environment
#
# IMPORTANT: Please, remember this should not be used to push to production!
# It is recommended instead to setup a CI/CD that will publish the container image
# and potentially apply the Task manifest.

# ---
# KO
# How to build and publish your Task container image?
# ---

# Which docker repository to push to
# Tips: if you are using KinD, "kind.local" seems to be a better option
# Please refer to official KO documentation
KO_DOCKER_REPO=ko.local

# ---
# APPLY
# How to apply your task to a Kubernetes cluster?
# ---

# Kustomization overlay to use when running "task apply"
APPLY_OVERLAY="base"

# Only apply to this specific kubectl context
# If left empty, use the current-context
APPLY_CONTEXT=""

# ---
# OUTPUT
# Where to write generated code and manifests?
# ---

# Name to use for the package containing tektasker internal helper code
OUTPUT_INTERNAL_PKG_NAME="tekton"

# Path to your internal non-reusable go packages
# Tektasker will add its internal package in it
OUTPUT_INTERNAL_PKGS="internal"

# Place where to write the Task Kustomization
#
# Example:
# If    OUTPUT_MANIFESTS=deployment
# Then  deployment/base will be a kustomization base generated by Tektasker.
#       You can then create overlays over of this base, for example, to add a
#       deployment/with-volumes overlay that will add volumes to your task.
#       If you use such a setup, you should update APPLY_OVERLAY to point to the
#       overlay you wish to apply.
OUTPUT_MANIFESTS=deployment

# ---
# Binaries PATH
# Where are the required tools?
# ---

# Path to Kubectl
PATH_KUBECTL=kubectl

# Path to Tektasker
PATH_TEKTASKER=tektasker

# Path to KO builder
PATH_KO=ko
`
