//go:build !ignore_autogenerated

/*
Copyright 2023 Enzo Nocera <enzo@nocera.eu>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by helpgen. DO NOT EDIT.

package markers

import (
	"sigs.k8s.io/controller-tools/pkg/markers"
)

func (Param) Help() *markers.DefinitionHelp {
	return &markers.DefinitionHelp{
		Category: "task",
		DetailedHelp: markers.DetailedHelp{
			Summary: "marks structs as Task parameter which can then be used in your code to take input from your users",
			Details: "",
		},
		FieldHelp: map[string]markers.DetailedHelp{
			"Name": {
				Summary: "is the name of your parameter",
				Details: "",
			},
			"Default": {
				Summary: "is the default value of the parameter",
				Details: "",
			},
			"Strict": {
				Summary: "means you expect the parameter to strictly respect the format of your struct. For this to be possible, the value passed to this parameter by your user will need to be a valid JSON value that can be unmarshalled into your struct, that's why you need to put valid JSON tags in your structure fields.",
				Details: "",
			},
		},
	}
}

func (Result) Help() *markers.DefinitionHelp {
	return &markers.DefinitionHelp{
		Category: "task",
		DetailedHelp: markers.DetailedHelp{
			Summary: "marks this struct as a result which means it can be Marshaled to populate the associated result",
			Details: "",
		},
		FieldHelp: map[string]markers.DetailedHelp{
			"Name": {
				Summary: "is the name of the result",
				Details: "",
			},
		},
	}
}

func (Task) Help() *markers.DefinitionHelp {
	return &markers.DefinitionHelp{
		Category: "task",
		DetailedHelp: markers.DetailedHelp{
			Summary: "marks your package as a Task. Your package need to be executable to be bundled inside a container image, so you should use this marker on your main package",
			Details: "",
		},
		FieldHelp: map[string]markers.DetailedHelp{
			"Name": {
				Summary: "is the name of your Task. It will be used as the name of your Task manifest.",
				Details: "",
			},
			"Version": {
				Summary: "is a way to communicate the version of your task to your users",
				Details: "",
			},
		},
	}
}

func (Workspace) Help() *markers.DefinitionHelp {
	return &markers.DefinitionHelp{
		Category: "task",
		DetailedHelp: markers.DetailedHelp{
			Summary: "asks a workspace for this task",
			Details: "",
		},
		FieldHelp: map[string]markers.DetailedHelp{
			"Name": {
				Summary: "is the name of the workspace",
				Details: "",
			},
			"Description": {
				Summary: "for your workspace",
				Details: "",
			},
			"MountPath": {
				Summary: "is useful to chose where to mount your workspace and is always relative to root (`/`)",
				Details: "",
			},
			"ReadOnly": {
				Summary: "defines if your workspace should be Read-Only, remembers Tekton recommends to only have a single writeable workspace",
				Details: "",
			},
			"Optional": {
				Summary: "defines if your user can choose not to provide this workspace",
				Details: "",
			},
		},
	}
}
